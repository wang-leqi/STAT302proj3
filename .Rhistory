fitting_plot <- ggplot(df, aes(x=x, y=y, color = continent)) +
ggtitle(label = "Actual vs Fitted Values") +
geom_point(aes(x = actual, y = fitted)) +
xlab(label = "Actual value") +
ylab(label = "Fitted value") +
geom_abline(slope = 1, intercept = 0) +
theme_bw()
# geom_line(aes(x = x, y = fitted, col="Fitted value",lwd = 0.1))
# labs(subtitle = paste("Testing Error:", round(test_err_k, 3))) +
# theme_bw()
fitting_plot
#A tutorial for my_knn_cv using my_penguins.
my_table <- data.frame()
my_penguins <- na.omit(my_penguins)
for(i in 1:10) {
my_result <- my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = i, k_cv = 5 )
my_table[1,i] <- my_result$cv_err
my_table[2,i] <- sum(as.numeric(my_penguins$species != my_result$class)) / nrow(my_penguins)
}
colnames(my_table) <- c("k_nn = 1", "k_nn = 2", "k_nn = 3", "k_nn = 4", "k_nn = 5", "k_nn = 6", "k_nn = 7", "k_nn = 8", "k_nn = 9", "k_nn = 10")
rownames(my_table) <- c("cv_err", "training_err")
my_table
#Calculate CV estimated MSE when k = 2, 5, and 10
mat <- matrix(NA, nrow = 90, ncol = 2)
for (k in c(2, 5, 10)){
for (i in 1:30) {
mat[k %/% 5 * 30 + i, 1] <- k
mat[k %/% 5 * 30 + i, 2] <- my_rf_cv(k)
}
}
colnames(mat) <- c("k", "mse")
mu <- result_p
#Write the hypothesis test associated with the gdpPercap coefficient.
my_t_test(x= my_gapminder$gdpPercap, alternative="less", mu)
#predict the fitted values
my_estimate <- lm_fit$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
#predict the fitted values
my_estimate <- lm_fit$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STAT302proj3)
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder does not equal to 60
val1 <- my_t_test(x=(my_gapminder$lifeExp),alternative="two sided",mu = 60)$p_value
#hypothesis: mean of the life Expectancy data from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder is larger than 60
val2 <- my_t_test(x=(my_gapminder$lifeExp),alternative="greater",mu = 60)$p_value
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy from my_gapminder is smaller than 60
val3 <- my_t_test(x=(my_gapminder$lifeExp),alternative="less",mu = 60)$p_value
result <- my_lm(lifeExp ~gdpPercap + continent, data = my_gapminder)
result_p <- result$`Pr(>|t|)`
result_gdp <- result_p[2]
result
result_p
mu <- result_p
#Write the hypothesis test associated with the gdpPercap coefficient.
my_t_test(x= my_gapminder$gdpPercap, alternative="less", mu)
#predict the fitted values
my_estimate <- lm_fit$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
#predict the fitted values
my_estimate <- result$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
df <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = y_hat, "continent" = my_gapminder$continent)
mu <- result_p
#Write the hypothesis test associated with the gdpPercap coefficient.
my_t_test(x= my_gapminder$gdpPercap, alternative="less", mu)
#predict the fitted values
my_estimate <- result$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
df <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = y_hat, "continent" = my_gapminder$continent)
#plot the Actual against Fitted values.
library(ggplot2)
x <- my_gapminder$gdpPercap
y <- df$y_hat
fitting_plot <- ggplot(df, aes(x=x, y=y, color = continent)) +
ggtitle(label = "Actual vs Fitted Values") +
geom_point(aes(x = actual, y = fitted)) +
xlab(label = "Actual value") +
ylab(label = "Fitted value") +
geom_abline(slope = 1, intercept = 0) +
theme_bw()
# geom_line(aes(x = x, y = fitted, col="Fitted value",lwd = 0.1))
# labs(subtitle = paste("Testing Error:", round(test_err_k, 3))) +
# theme_bw()
fitting_plot
#A tutorial for my_knn_cv using my_penguins.
my_table <- data.frame()
my_penguins <- na.omit(my_penguins)
for(i in 1:10) {
my_result <- my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = i, k_cv = 5 )
my_table[1,i] <- my_result$cv_err
my_table[2,i] <- sum(as.numeric(my_penguins$species != my_result$class)) / nrow(my_penguins)
}
colnames(my_table) <- c("k_nn = 1", "k_nn = 2", "k_nn = 3", "k_nn = 4", "k_nn = 5", "k_nn = 6", "k_nn = 7", "k_nn = 8", "k_nn = 9", "k_nn = 10")
rownames(my_table) <- c("cv_err", "training_err")
my_table
#Calculate CV estimated MSE when k = 2, 5, and 10
mat <- matrix(NA, nrow = 90, ncol = 2)
for (k in c(2, 5, 10)){
for (i in 1:30) {
mat[k %/% 5 * 30 + i, 1] <- k
mat[k %/% 5 * 30 + i, 2] <- my_rf_cv(k)
}
}
colnames(mat) <- c("k", "mse")
#Calculate CV estimated MSE when k = 2, 5, and 10
mat <- matrix(NA, nrow = 90, ncol = 2)
for (k in c(2, 5, 10)){
for (i in 1:30) {
mat[k %/% 5 * 30 + i, 1] <- k
mat[k %/% 5 * 30 + i, 2] <- my_rf_cv(k)
}
}
#Generate a boxplot of MSE for multiple values of k.
mat <- as.data.frame(mat)
ggplot(data = mat,
aes(
x = unlist(f),
y = unlist(all_table),
group = unlist(f),
fill = f
)) +
geom_boxplot() +
xlab("folds") +
ylab("MSE") +
labs("Misclassification Errors with different folds") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.7, face = "bold"),
axis.text.x = element_text(
angle = 45,
hjust = 1,
vjust = 1
),
panel.spacing.x = unit(0.7, "cm")
) +
scale_fill_brewer(
type = "seq",
palette = 1,
direction = 1,
aesthetics = "fill"
)
#Generate a boxplot of MSE for multiple values of k.
f <- rep(c(2, 5, 10), each = 30) %>% as.factor()
all_table <- rbind(my_table_1, my_table_2, my_table_3)
#Generate a boxplot of MSE for multiple values of k.
f <- rep(c(2, 5, 10), each = 30) %>% as.factor()
df <- data.frame(all_table, f)
#Generate a boxplot of MSE for multiple values of k.
f <- rep(c(2, 5, 10), each = 30) %>% as.factor()
mat <- as.data.frame(mat)
ggplot(data = mat,
aes(
x = unlist(f),
y = unlist(all_table),
group = unlist(f),
fill = f
)) +
geom_boxplot() +
xlab("folds") +
ylab("MSE") +
labs("Misclassification Errors with different folds") +
theme_bw() +
theme(
plot.title = element_text(hjust = 0.7, face = "bold"),
axis.text.x = element_text(
angle = 45,
hjust = 1,
vjust = 1
),
panel.spacing.x = unit(0.7, "cm")
) +
scale_fill_brewer(
type = "seq",
palette = 1,
direction = 1,
aesthetics = "fill"
)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mse) %>%
ggplot(aes(group = k, y = mse, ymax = 142000, ymin = 111000)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k") +
theme_bw(base_size = 14)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mat)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k") +
theme_bw(base_size = 14)
View(mat)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(STAT302proj3)
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder does not equal to 60
val1 <- my_t_test(x=(my_gapminder$lifeExp),alternative="two sided",mu = 60)$p_value
#hypothesis: mean of the life Expectancy data from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder is larger than 60
val2 <- my_t_test(x=(my_gapminder$lifeExp),alternative="greater",mu = 60)$p_value
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy from my_gapminder is smaller than 60
val3 <- my_t_test(x=(my_gapminder$lifeExp),alternative="less",mu = 60)$p_value
result <- my_lm(lifeExp ~gdpPercap + continent, data = my_gapminder)
result_p <- result$`Pr(>|t|)`
result_gdp <- result_p[2]
result
result_p
mu <- result_p
#Write the hypothesis test associated with the gdpPercap coefficient.
my_t_test(x= my_gapminder$gdpPercap, alternative="less", mu)
#predict the fitted values
my_estimate <- result$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
df <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = y_hat, "continent" = my_gapminder$continent)
#plot the Actual against Fitted values.
library(ggplot2)
x <- my_gapminder$gdpPercap
y <- df$y_hat
fitting_plot <- ggplot(df, aes(x=x, y=y, color = continent)) +
ggtitle(label = "Actual vs Fitted Values") +
geom_point(aes(x = actual, y = fitted)) +
xlab(label = "Actual value") +
ylab(label = "Fitted value") +
geom_abline(slope = 1, intercept = 0) +
theme_bw()
# geom_line(aes(x = x, y = fitted, col="Fitted value",lwd = 0.1))
# labs(subtitle = paste("Testing Error:", round(test_err_k, 3))) +
# theme_bw()
fitting_plot
#A tutorial for my_knn_cv using my_penguins.
my_table <- data.frame()
my_penguins <- na.omit(my_penguins)
for(i in 1:10) {
my_result <- my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = i, k_cv = 5 )
my_table[1,i] <- my_result$cv_err
my_table[2,i] <- sum(as.numeric(my_penguins$species != my_result$class)) / nrow(my_penguins)
}
colnames(my_table) <- c("k_nn = 1", "k_nn = 2", "k_nn = 3", "k_nn = 4", "k_nn = 5", "k_nn = 6", "k_nn = 7", "k_nn = 8", "k_nn = 9", "k_nn = 10")
rownames(my_table) <- c("cv_err", "training_err")
my_table
#Calculate CV estimated MSE when k = 2, 5, and 10
mat <- matrix(NA, nrow = 90, ncol = 2)
for (k in c(2, 5, 10)){
for (i in 1:30) {
mat[k %/% 5 * 30 + i, 1] <- k
mat[k %/% 5 * 30 + i, 2] <- my_rf_cv(k)
}
}
colnames(mat) <- c("k", "mse")
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mat)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mat, ymax = 142000, ymin = 111000)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k") +
theme_bw(base_size = 14)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k") +
theme_bw(base_size = 14)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
library(palmerpenguins)
# data(package = "palmerpenguins")
data("penguins")
force(penguins)
force(penguins_raw)
View(penguins)
View(penguins_raw)
write.csv(penguins, file = "data/my_penguins")
write.csv(penguins, file = "Data/my_penguins")
write.csv(penguins, file = "Data/my_penguins")
write.csv(penguins, file = "Data/my_penguins.csv")
setwd("~/Documents/UW_amath/stat302-project3/STAT302Project3Analysis")
write.csv(penguins, file = "Data/my_penguins.csv")
library(gapminder)
data(lifeExp)
data("lifeExp")
?gapminder
write.csv(gapminder, file = "Data/my_gapminder.csv")
devtools::install_github("wang-leqi/STAT302proj3")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
devtools::install_github("wang-leqi/STAT302proj3")
devtools::install_github("wang-leqi/STAT302proj3")
library(STAT302proj3)
my_gapminder <- read.csv("../Data/my_gapminder.csv")
my_penguins <- read.csv("../Data/my_penguins.csv")
my_t.test <- source("../Code/my_t.test.R")$value
setwd("~/Documents/UW_amath/stat302-project3/STAT302proj3")
my_gapminder <- read.csv("../Data/my_gapminder.csv")
my_penguins <- read.csv("../Data/my_penguins.csv")
my_t.test <- source("../Code/my_t.test.R")$value
my_gapminder <- read.csv("../Data/my_gapminder.csv")
my_penguins <- read.csv("../Data/my_penguins.csv")
my_t.test <- source("../Code/my_t.test.R")$value
my_lm <- source("../Code/my_lm.R")$value
my_knn_cv <- source("../Code/my_knn_cv.R")$value
my_rf_cv <- source("../Code/my_rf_cv.R")$value
library(tidyverse)
library(ggplot2)
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
y <- df$y_hat
mu <- result_p
View(my_knn_cv)
library(tidyverse)
library(ggplot2)
my_gapminder <- read.csv("../Data/my_gapminder.csv")
my_penguins <- read.csv("../Data/my_penguins.csv")
my_t.test <- source("../Code/my_t.test.R")$value
my_lm <- source("../Code/my_lm.R")$value
my_knn_cv <- source("../Code/my_knn_cv.R")$value
my_rf_cv <- source("../Code/my_rf_cv.R")$value
library(STAT302proj3)
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder does not equal to 60
val1 <- my_t_test(x=(my_gapminder$lifeExp),alternative="two sided",mu = 60)$p_value
#hypothesis: mean of the life Expectancy data from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder is larger than 60
val2 <- my_t_test(x=(my_gapminder$lifeExp),alternative="greater",mu = 60)$p_value
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy from my_gapminder is smaller than 60
val3 <- my_t_test(x=(my_gapminder$lifeExp),alternative="less",mu = 60)$p_value
result <- my_lm(lifeExp ~gdpPercap + continent, data = my_gapminder)
result_p <- result$`Pr(>|t|)`
result_gdp <- result_p[2]
result
result_p
mu <- result_p
#Write the hypothesis test associated with the gdpPercap coefficient.
my_t_test(x= my_gapminder$gdpPercap, alternative="less", mu)
#predict the fitted values
my_estimate <- result$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
df <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = y_hat, "continent" = my_gapminder$continent)
#plot the Actual against Fitted values.
x <- my_gapminder$gdpPercap
y <- df$y_hat
fitting_plot <- ggplot(df, aes(x=x, y=y, color = continent)) +
ggtitle(label = "Actual vs Fitted Values") +
geom_point(aes(x = actual, y = fitted)) +
xlab(label = "Actual value") +
ylab(label = "Fitted value") +
geom_abline(slope = 1, intercept = 0) +
theme_bw()
# geom_line(aes(x = x, y = fitted, col="Fitted value",lwd = 0.1))
# labs(subtitle = paste("Testing Error:", round(test_err_k, 3))) +
# theme_bw()
ggsave("plot1.jpg", path = "../Output/Figures")
fitting_plot
#A tutorial for my_knn_cv using my_penguins.
my_table <- data.frame()
my_penguins <- na.omit(my_penguins)
for(i in 1:10) {
my_result <- my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = i, k_cv = 5 )
my_table[1,i] <- my_result$cv_err
my_table[2,i] <- sum(as.numeric(my_penguins$species != my_result$class)) / nrow(my_penguins)
}
colnames(my_table) <- c("k_nn = 1", "k_nn = 2", "k_nn = 3", "k_nn = 4", "k_nn = 5", "k_nn = 6", "k_nn = 7", "k_nn = 8", "k_nn = 9", "k_nn = 10")
rownames(my_table) <- c("cv_err", "training_err")
my_table
#Calculate CV estimated MSE when k = 2, 5, and 10
mat <- matrix(NA, nrow = 90, ncol = 2)
for (k in c(2, 5, 10)){
for (i in 1:30) {
mat[k %/% 5 * 30 + i, 1] <- k
mat[k %/% 5 * 30 + i, 2] <- my_rf_cv(k)
}
}
colnames(mat) <- c("k", "mse")
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
ggsave("plot2.jpg", path = "../Output/Figures")
ggsave("plot2.jpg", path = "../Output/Figures")
ggsave("plot2.jpg", path = "../Output/Figures")
saveRDS(mat, file = "../Output/Results/mse.RDS")
library(tidyverse)
library(ggplot2)
my_gapminder <- read.csv("../Data/my_gapminder.csv")
my_penguins <- read.csv("../Data/my_penguins.csv")
my_t.test <- source("../Code/my_t.test.R")$value
my_lm <- source("../Code/my_lm.R")$value
my_knn_cv <- source("../Code/my_knn_cv.R")$value
my_rf_cv <- source("../Code/my_rf_cv.R")$value
library(STAT302proj3)
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder does not equal to 60
val1 <- my_t_test(x=(my_gapminder$lifeExp),alternative="two sided",mu = 60)$p_value
#hypothesis: mean of the life Expectancy data from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy data from my_gapminder is larger than 60
val2 <- my_t_test(x=(my_gapminder$lifeExp),alternative="greater",mu = 60)$p_value
#hypothesis: mean of the life Expectancy from my_gapminder equals to 60(p-value cut-off of α=0.05)
#alternative hypothesis: mean of the life Expectancy from my_gapminder is smaller than 60
val3 <- my_t_test(x=(my_gapminder$lifeExp),alternative="less",mu = 60)$p_value
result <- my_lm(lifeExp ~gdpPercap + continent, data = my_gapminder)
result_p <- result$`Pr(>|t|)`
result_gdp <- result_p[2]
result
result_p
mu <- result_p
#Write the hypothesis test associated with the gdpPercap coefficient.
my_t_test(x= my_gapminder$gdpPercap, alternative="less", mu)
#predict the fitted values
my_estimate <- result$Estimate
matrix <- model.matrix(lifeExp ~gdpPercap + continent, data = my_gapminder)
y_hat <- matrix %*% as.matrix(my_estimate)
df <- data.frame("actual" = my_gapminder$lifeExp, "fitted" = y_hat, "continent" = my_gapminder$continent)
#plot the Actual against Fitted values.
x <- my_gapminder$gdpPercap
y <- df$y_hat
fitting_plot <- ggplot(df, aes(x=x, y=y, color = continent)) +
ggtitle(label = "Actual vs Fitted Values") +
geom_point(aes(x = actual, y = fitted)) +
xlab(label = "Actual value") +
ylab(label = "Fitted value") +
geom_abline(slope = 1, intercept = 0) +
theme_bw()
# geom_line(aes(x = x, y = fitted, col="Fitted value",lwd = 0.1))
# labs(subtitle = paste("Testing Error:", round(test_err_k, 3))) +
# theme_bw()
ggsave("plot1.jpg", path = "../Output/Figures")
fitting_plot
#A tutorial for my_knn_cv using my_penguins.
my_table <- data.frame()
my_penguins <- na.omit(my_penguins)
for(i in 1:10) {
my_result <- my_knn_cv(train = my_penguins, cl = my_penguins$species, k_nn = i, k_cv = 5 )
my_table[1,i] <- my_result$cv_err
my_table[2,i] <- sum(as.numeric(my_penguins$species != my_result$class)) / nrow(my_penguins)
}
colnames(my_table) <- c("k_nn = 1", "k_nn = 2", "k_nn = 3", "k_nn = 4", "k_nn = 5", "k_nn = 6", "k_nn = 7", "k_nn = 8", "k_nn = 9", "k_nn = 10")
rownames(my_table) <- c("cv_err", "training_err")
my_table
#Calculate CV estimated MSE when k = 2, 5, and 10
mat <- matrix(NA, nrow = 90, ncol = 2)
for (k in c(2, 5, 10)){
for (i in 1:30) {
mat[k %/% 5 * 30 + i, 1] <- k
mat[k %/% 5 * 30 + i, 2] <- my_rf_cv(k)
}
}
colnames(mat) <- c("k", "mse")
saveRDS(mat, file = "../Output/Results/mse.RDS")
#Generate a boxplot of MSE for multiple values of k.
data.frame(mat) %>%
ggplot(aes(group = k, y = mse)) +
geom_boxplot(aes(x = k, color = k)) +
xlab("k")
ggsave("plot2.jpg", path = "../Output/Figures")
tab <- matrix(NA, nrow = 3, ncol = 2)
rownames(tab) <- c("k = 2", "k = 5", "k = 10")
colnames(tab) <- c("mean", "sd")
tab[1, 1] <- mean(mat[1:30, 2])
tab[1, 2] <- sd(mat[1:30, 2])
tab[2, 1] <- mean(mat[31:60, 2])
tab[2, 2] <- sd(mat[31:60, 2])
tab[3, 1] <- mean(mat[61:90, 2])
tab[3, 2] <- sd(mat[61:90, 2])
tab
write_csv(tab, file = "../Output/Results/summary.csv")
write_csv(as.data.frame(tab), file = "../Output/Results/summary.csv")
